// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: passage3d/claim/v1beta1/supply.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CoinDetails represents bonded and unbonded coin details
type CoinDetails struct {
	Bonded   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=bonded,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"bonded" yaml:"bonded"`
	Unbonded github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=unbonded,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"unbonded" yaml:"unbonded"`
}

func (m *CoinDetails) Reset()         { *m = CoinDetails{} }
func (m *CoinDetails) String() string { return proto.CompactTextString(m) }
func (*CoinDetails) ProtoMessage()    {}
func (*CoinDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_e35377e43c46a626, []int{0}
}
func (m *CoinDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinDetails.Merge(m, src)
}
func (m *CoinDetails) XXX_Size() int {
	return m.Size()
}
func (m *CoinDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CoinDetails proto.InternalMessageInfo

func (m *CoinDetails) GetBonded() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Bonded
	}
	return nil
}

func (m *CoinDetails) GetUnbonded() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Unbonded
	}
	return nil
}

// Supply represents total coins vested, available and circulating supply
type Supply struct {
	Vesting     CoinDetails                              `protobuf:"bytes,1,opt,name=vesting,proto3" json:"vesting" yaml:"vesting"`
	Available   CoinDetails                              `protobuf:"bytes,2,opt,name=available,proto3" json:"available" yaml:"available"`
	Circulating github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=circulating,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"circulating" yaml:"circulating"`
	Total       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=total,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total" yaml:"total"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e35377e43c46a626, []int{1}
}
func (m *Supply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(m, src)
}
func (m *Supply) XXX_Size() int {
	return m.Size()
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CoinDetails)(nil), "passage3d.claim.v1beta1.CoinDetails")
	proto.RegisterType((*Supply)(nil), "passage3d.claim.v1beta1.Supply")
}

func init() {
	proto.RegisterFile("passage3d/claim/v1beta1/supply.proto", fileDescriptor_e35377e43c46a626)
}

var fileDescriptor_e35377e43c46a626 = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0x93, 0x16, 0xca, 0xe1, 0xf2, 0x4f, 0x16, 0x12, 0xe5, 0x86, 0xf8, 0x88, 0x0e, 0xa9,
	0x42, 0xc2, 0xd6, 0xdd, 0x6d, 0x37, 0x96, 0x5b, 0x10, 0x03, 0x52, 0x11, 0x0b, 0x9b, 0x93, 0x58,
	0xc1, 0xc2, 0x8d, 0xa3, 0xb3, 0x1b, 0x51, 0x06, 0x46, 0xc4, 0x88, 0x18, 0x98, 0x6f, 0xe6, 0x93,
	0xdc, 0x78, 0x23, 0x93, 0x41, 0xed, 0x82, 0xd8, 0xc8, 0x27, 0x40, 0xb5, 0xdd, 0x34, 0x0b, 0xaa,
	0x32, 0x25, 0x7e, 0xfd, 0x3e, 0xcf, 0xf3, 0xcb, 0x1b, 0xbd, 0xe0, 0xb0, 0xa4, 0x4a, 0xd1, 0x9c,
	0x9d, 0x64, 0x24, 0x15, 0x94, 0xcf, 0x48, 0x75, 0x94, 0x30, 0x4d, 0x8f, 0x88, 0x9a, 0x97, 0xa5,
	0x58, 0xe0, 0xf2, 0x5c, 0x6a, 0x09, 0x1f, 0x34, 0x5d, 0xd8, 0x76, 0x61, 0xdf, 0xb5, 0x7f, 0x3f,
	0x97, 0xb9, 0xb4, 0x3d, 0x64, 0xfd, 0xe6, 0xda, 0xf7, 0xa3, 0x54, 0xaa, 0x99, 0x54, 0x24, 0xa1,
	0x8a, 0x35, 0x86, 0xa9, 0xe4, 0x85, 0xbb, 0x8f, 0xbf, 0xf5, 0xc0, 0xf0, 0x99, 0xe4, 0xc5, 0x19,
	0xd3, 0x94, 0x0b, 0x05, 0x3f, 0x82, 0x41, 0x22, 0x8b, 0x8c, 0x65, 0xa3, 0xf0, 0xa0, 0x3f, 0x1e,
	0x1e, 0x3f, 0xc4, 0xce, 0x00, 0xaf, 0x0d, 0x36, 0x59, 0x78, 0xad, 0x98, 0xbc, 0xb8, 0x34, 0x28,
	0xf8, 0x63, 0x90, 0x17, 0xd4, 0x06, 0xdd, 0x5e, 0xd0, 0x99, 0x38, 0x8d, 0xdd, 0x39, 0xfe, 0xfe,
	0x13, 0x8d, 0x73, 0xae, 0xdf, 0xce, 0x13, 0x9c, 0xca, 0x19, 0xf1, 0x20, 0xee, 0xf1, 0x54, 0x65,
	0xef, 0x88, 0x5e, 0x94, 0x4c, 0x59, 0x2f, 0x35, 0xf5, 0x26, 0xf0, 0x53, 0x08, 0xf6, 0xe6, 0x85,
	0x47, 0xe8, 0xed, 0x42, 0x78, 0xe9, 0x11, 0x1a, 0x49, 0x6d, 0xd0, 0x5d, 0x07, 0xb1, 0xa9, 0x74,
	0xc3, 0x68, 0x8c, 0xe2, 0xbf, 0x7d, 0x30, 0x78, 0x65, 0x07, 0x0f, 0x29, 0xb8, 0x51, 0x31, 0xa5,
	0x79, 0x91, 0x8f, 0xc2, 0x83, 0x70, 0x3c, 0x3c, 0x3e, 0xc4, 0xff, 0xf9, 0x09, 0xb8, 0x35, 0xca,
	0xc9, 0x23, 0x0f, 0xb7, 0x11, 0xd7, 0x06, 0xdd, 0x71, 0x6c, 0xbe, 0x10, 0x4f, 0x37, 0x57, 0x90,
	0x83, 0x9b, 0xb4, 0xa2, 0x5c, 0xd0, 0x44, 0xb0, 0x51, 0xaf, 0x43, 0xc8, 0x63, 0x1f, 0xb2, 0x95,
	0xd7, 0x06, 0xdd, 0x73, 0x31, 0x4d, 0x29, 0x9e, 0x6e, 0xaf, 0xe1, 0xd7, 0x10, 0x0c, 0x53, 0x7e,
	0x9e, 0xce, 0x05, 0xb5, 0x9f, 0xd4, 0xdf, 0x35, 0xe4, 0xd7, 0x3e, 0xa2, 0xad, 0xaa, 0x0d, 0x82,
	0x2e, 0xa4, 0x55, 0xec, 0x36, 0xea, 0xb6, 0x1d, 0xfc, 0x00, 0xae, 0x6b, 0xa9, 0xa9, 0x18, 0x5d,
	0xdb, 0x45, 0xf3, 0xdc, 0xd3, 0xb8, 0xfe, 0xda, 0xa0, 0x5b, 0x8e, 0xc3, 0x1e, 0xbb, 0x11, 0x38,
	0x8b, 0xd3, 0xbd, 0xcf, 0x17, 0x28, 0xf8, 0x7d, 0x81, 0x82, 0xc9, 0xd9, 0xe5, 0x32, 0x0a, 0xaf,
	0x96, 0x51, 0xf8, 0x6b, 0x19, 0x85, 0x5f, 0x56, 0x51, 0x70, 0xb5, 0x8a, 0x82, 0x1f, 0xab, 0x28,
	0x78, 0xf3, 0xa4, 0x65, 0xca, 0x8a, 0x8a, 0x66, 0xbc, 0x22, 0xdb, 0x75, 0x7d, 0xef, 0x17, 0xd6,
	0x9a, 0x27, 0x03, 0xbb, 0x59, 0x27, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x77, 0x78, 0x27,
	0xd0, 0x03, 0x00, 0x00,
}

func (m *CoinDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unbonded) > 0 {
		for iNdEx := len(m.Unbonded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unbonded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupply(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bonded) > 0 {
		for iNdEx := len(m.Bonded) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bonded[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupply(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Supply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupply(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Circulating) > 0 {
		for iNdEx := len(m.Circulating) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Circulating[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupply(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Available.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSupply(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Vesting.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSupply(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSupply(dAtA []byte, offset int, v uint64) int {
	offset -= sovSupply(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoinDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bonded) > 0 {
		for _, e := range m.Bonded {
			l = e.Size()
			n += 1 + l + sovSupply(uint64(l))
		}
	}
	if len(m.Unbonded) > 0 {
		for _, e := range m.Unbonded {
			l = e.Size()
			n += 1 + l + sovSupply(uint64(l))
		}
	}
	return n
}

func (m *Supply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vesting.Size()
	n += 1 + l + sovSupply(uint64(l))
	l = m.Available.Size()
	n += 1 + l + sovSupply(uint64(l))
	if len(m.Circulating) > 0 {
		for _, e := range m.Circulating {
			l = e.Size()
			n += 1 + l + sovSupply(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovSupply(uint64(l))
		}
	}
	return n
}

func sovSupply(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSupply(x uint64) (n int) {
	return sovSupply(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bonded = append(m.Bonded, types.Coin{})
			if err := m.Bonded[len(m.Bonded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unbonded", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unbonded = append(m.Unbonded, types.Coin{})
			if err := m.Unbonded[len(m.Unbonded)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Supply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vesting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vesting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Available.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Circulating", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Circulating = append(m.Circulating, types.Coin{})
			if err := m.Circulating[len(m.Circulating)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, types.Coin{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSupply(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSupply
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSupply
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSupply
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSupply
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSupply        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSupply          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSupply = fmt.Errorf("proto: unexpected end of group")
)
